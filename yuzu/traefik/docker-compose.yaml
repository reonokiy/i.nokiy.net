services:
  traefik:
    image: traefik:v3.5.0
    restart: always
    command:
      # --- API and Dashboard ---
      - "--api.dashboard=true"
      
      # --- EntryPoints ---
      # Define the HTTP entrypoint on port 80
      - "--entrypoints.web.address=:80"
      # Define the HTTPS entrypoint on port 443
      - "--entrypoints.websecure.address=:443"
      # Define the internal entrypoint on port 8080
      - "--entrypoints.internal.address=:8080"
      # Redirect all traffic from HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"

      # --- Provider ---
      # Enable Docker as the configuration provider
      - "--providers.docker=true"
      # Do not expose all containers by default
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"

      # --- Certificate Resolver ---
      # Define a resolver named 'cloudflare'
      - "--certificatesresolvers.cloudflare.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      # To use Let's Encrypt's staging server for testing, uncomment the next line:
      # - "--certificatesresolvers.cloudflare.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

      # --- Logging ---
      - "--log.level=INFO"
    ports:
      - "${EXTERNAL_IPV4}:80:80"      # HTTP traffic
      - "[${EXTERNAL_IPV6}]:80:80"
      - "${EXTERNAL_IPV4}:443:443"    # HTTPS traffic
      - "[${EXTERNAL_IPV6}]:443:443"
      - "${INTERNAL_IPV4}:443:8080"  # Internal traffic

    environment:
      # Pass the Cloudflare API Token from the .env file
      # - CF_API_EMAIL=${CF_API_EMAIL}
      # - CF_API_TOKEN=${CF_API_TOKEN}
      - CF_DNS_API_TOKEN=${CF_API_TOKEN}
      # - CLOUDFLARE_ZONE_API_TOKEN=${CF_API_TOKEN}
      # This is now used by the command argument instead of the traefik.yml file
      - ACME_EMAIL=${ACME_EMAIL}
    volumes:
      # Mount the Docker socket to allow Traefik to listen to Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "${DATA_DIR:-/data}/traefik/acme.json:/letsencrypt/acme.json"
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.yuzu.i.nokiy.net`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=internal"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare"
  
  authentik-proxy:
    image: ghcr.io/goauthentik/proxy:2025.6.4
    restart: unless-stopped
    environment:
        AUTHENTIK_HOST: https://auth.nokiy.net
        AUTHENTIK_INSECURE: "false"
        AUTHENTIK_TOKEN: ${AUTHENTIK_TOKEN}
        # Starting with 2021.9, you can optionally set this too
        # when authentik_host for internal communication doesn't match the public URL
        # AUTHENTIK_HOST_BROWSER: https://external-domain.tld
    labels:
        traefik.enable: true
        traefik.port: 9000
        # `authentik-proxy` refers to the service name in the compose file.
        traefik.http.middlewares.authentik.forwardauth.address: http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik
        traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
        traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
    networks:
      - proxy

networks:
  proxy:
    external: true
    name: proxy
